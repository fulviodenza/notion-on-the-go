// Code generated by ent, DO NOT EDIT.

package user

import (
	"notiononthego/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// APIToken applies equality check predicate on the "api_token" field. It's identical to APITokenEQ.
func APIToken(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAPIToken, v))
}

// DefaultPage applies equality check predicate on the "default_page" field. It's identical to DefaultPageEQ.
func DefaultPage(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDefaultPage, v))
}

// APITokenEQ applies the EQ predicate on the "api_token" field.
func APITokenEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAPIToken, v))
}

// APITokenNEQ applies the NEQ predicate on the "api_token" field.
func APITokenNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAPIToken, v))
}

// APITokenIn applies the In predicate on the "api_token" field.
func APITokenIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAPIToken, vs...))
}

// APITokenNotIn applies the NotIn predicate on the "api_token" field.
func APITokenNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAPIToken, vs...))
}

// APITokenGT applies the GT predicate on the "api_token" field.
func APITokenGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAPIToken, v))
}

// APITokenGTE applies the GTE predicate on the "api_token" field.
func APITokenGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAPIToken, v))
}

// APITokenLT applies the LT predicate on the "api_token" field.
func APITokenLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAPIToken, v))
}

// APITokenLTE applies the LTE predicate on the "api_token" field.
func APITokenLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAPIToken, v))
}

// APITokenContains applies the Contains predicate on the "api_token" field.
func APITokenContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAPIToken, v))
}

// APITokenHasPrefix applies the HasPrefix predicate on the "api_token" field.
func APITokenHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAPIToken, v))
}

// APITokenHasSuffix applies the HasSuffix predicate on the "api_token" field.
func APITokenHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAPIToken, v))
}

// APITokenEqualFold applies the EqualFold predicate on the "api_token" field.
func APITokenEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAPIToken, v))
}

// APITokenContainsFold applies the ContainsFold predicate on the "api_token" field.
func APITokenContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAPIToken, v))
}

// DefaultPageEQ applies the EQ predicate on the "default_page" field.
func DefaultPageEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDefaultPage, v))
}

// DefaultPageNEQ applies the NEQ predicate on the "default_page" field.
func DefaultPageNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDefaultPage, v))
}

// DefaultPageIn applies the In predicate on the "default_page" field.
func DefaultPageIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldDefaultPage, vs...))
}

// DefaultPageNotIn applies the NotIn predicate on the "default_page" field.
func DefaultPageNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDefaultPage, vs...))
}

// DefaultPageGT applies the GT predicate on the "default_page" field.
func DefaultPageGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldDefaultPage, v))
}

// DefaultPageGTE applies the GTE predicate on the "default_page" field.
func DefaultPageGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDefaultPage, v))
}

// DefaultPageLT applies the LT predicate on the "default_page" field.
func DefaultPageLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldDefaultPage, v))
}

// DefaultPageLTE applies the LTE predicate on the "default_page" field.
func DefaultPageLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDefaultPage, v))
}

// DefaultPageContains applies the Contains predicate on the "default_page" field.
func DefaultPageContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldDefaultPage, v))
}

// DefaultPageHasPrefix applies the HasPrefix predicate on the "default_page" field.
func DefaultPageHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldDefaultPage, v))
}

// DefaultPageHasSuffix applies the HasSuffix predicate on the "default_page" field.
func DefaultPageHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldDefaultPage, v))
}

// DefaultPageEqualFold applies the EqualFold predicate on the "default_page" field.
func DefaultPageEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldDefaultPage, v))
}

// DefaultPageContainsFold applies the ContainsFold predicate on the "default_page" field.
func DefaultPageContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldDefaultPage, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
